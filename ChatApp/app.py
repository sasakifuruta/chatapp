# ログアウト、退会以外の操作でユーザーからリクエストがあった場合、利用時間内か時間外かを判断し、通常html or 激おこhtmlを返す。
# サンプルアプリを参考にしている。実際にコーディングする時は、他の書き方もないか調べながら書いた方がいいと思う。
# 利用時間内か時間外かの判断の部分は毎回同じコードになるため、関数としてまとめてもいいかも？（書けないけど）
# 条件分岐がしつこくなっている。もうちょっとすっきりしたコードにできると思う。


# flaskをインポート

# 必要なライブラリをインポート（uuid,hashlib等）

# models.pyからインポート


# flaskのお決まりの冒頭文、セッションの有効期間の指定
# セッションの内容やflashメッセージを暗号化


# 新規登録画面の表示

# 新規登録の処理

  # エンドポイント、メソッドの指定
  # 登録フォームに入力された値を変数に格納
  # mailのパターン認識

  # if:ユーザーが入力した内容に対しての条件分岐
    # 入力漏れはないか？
    # PW1・PW2の不一致はないか？
    # mailのパターンの不一致はないか？
    # return:各項目でflashメッセージを返す

  # else:入力内容が正しい場合
    # mailをキーに、DBと照合。
    # if:DBにすでにユーザーが登録されている場合→flashメッセージを返す
    # else:新規のユーザーの場合
    # ユーザーidをuuidでランダムな識別子にする。
    # PWをハッシュ化する。
    # DBへの登録処理
    # セッションに格納
    # ホーム画面に移行
  # 登録処理以外のパターンは全てもとの画面にリダイレクト


# ログインページの表示
  # エンドポイント、メソッドの指定（激おこはGET,ログインはPOST）
  # 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # if:ログインの処理（POSTの場合）
    # ユーザーが入力したmail,pwを変数に格納

    # 入力内容を条件分岐して処理
    # if:入力漏れはないか？ flashメッセージを返す
    # else:入力できている場合、mailをキーにDBを参照
      # if:DBに存在しない場合の処理 flashメッセージを返す
      # else:DBに存在する場合の処理
        # PWをハッシュ化
        # DBのPWと一致しない場合の処理
        # 一致する場合の処理（セッションに値を格納）
        # 次のページへ移る
    # その他、一致しない場合、ログインページに戻る


# ログアウト
# エンドポイント、メソッドの指定
# セッションをクリアしてログイン画面へ移行


# 退会
# エンドポイント、メソッドの指定
# セッションからuidを取得。uidをキーに、DBを参照
# if:ユーザー情報が一致した場合、models.pyの関数を使って処理を行う。（is_active = False）
# セッションをクリアしてログイン・新規登録画面へ移行 flashメッセージ（いつでも遊びにきてね的な）
# else:失敗した場合のメッセージを送る



# プロフィール画像の処理（どこに書く？新たにエンドポイントを指定した方がよさそうな気が。）
# エンドポイント、メソッドの指定（激おこはGET,画像はPOST）
  # 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:
    # セッションからuidを取得、idをキーにDBを参照
    # if:uidがなかった場合、ログイン画面に返す flashメッセージを返す
    # else:画像投稿処理
      # POSTメソッドを指定
      # ユーザーが選択した画像を変数に格納
      # DBに書き込む指示
      # プロフィールページに返す 


# グループ一覧ページの表示
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # セッションからuidを取得。
    # if:uidがなかった場合、ログイン画面に返す flashメッセージを返す
    # else:uidをキーにDBを参照。全てのグループを取得。
    # for:グループごとに、messageがis_read=False(未読)の数をカウント？
    # グループを新しい順に並び変える。
    # グループ一覧ページへ移行



# グループの追加
# エンドポイント、メソッドの指定（激おこはGET,追加はPOST）
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # POSTメソッドを指定
    # セッションからuidを取得
    # if:uidがなかった場合、ログイン画面に返す flashメッセージを返す
    # else:ユーザーが入力したグループ名を変数に格納
      # グループ名をキーにDBを検索
      # if:グループ名がDBにない場合
        # DBにグループを追加してグループ一覧ページへ
      # else:グループ名がすでにある場合
        # エラーメッセージ、ページを返す


# グループ画像の追加
# プロフィール画像と同様、別処理でいい？
# エンドポイント、メソッドの指定（激おこはGET,ログインはPOST）
  # 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:
    # セッションからuidを取得、idをキーにDBを参照
    # if:uidがなかった場合、ログイン画面に返す flashメッセージを返す
    # else:画像投稿処理
      # POSTメソッドを指定
      # ユーザーが選択した画像を変数に格納
      # DBに書き込む指示
      # グループ一覧に返す 


# グループの更新
# エンドポイント、メソッドの指定（激おこはGET,更新はPOST）
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # POSTメソッドを指定
    # セッションからuidを取得
    # if:uidがなかった場合、ログイン画面へ返す flashメッセージを返す
    # else:グループ更新の処理
    # フォームに入力された内容を取得、変数に代入
    # uid,cid,グループ名をキーにグループを更新
    # グループ一覧画面に移行



# グループの削除
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # セッションからuidを取得
    # if:uidがない場合、ログイン画面に返す flashメッセージを返す
    # else:グループidをキーにDBから情報を取得
      # if:グループ作成者が違う場合、エラーメッセージ、チャンネル一覧へ返す
      # else:DBへグループの削除を指示、新たに全グループを表示
      # グループ一覧へ返す


# グループ詳細ページの表示
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # セッションからuidを取得
    # if:uidがない場合、ログイン画面へ返す flashメッセージを返す
    # else:
      # グループidに一致したグループをDBから取得
      # グループidに一致したメッセージをDBから取得
      # 取得したメッセージのうち、is_read=False→Trueにする
      # htmlファイルをレンダリング、ユーザーに返す


# メッセージの投稿
# エンドポイント、メソッドの指定（激おこはGET,投稿はPOST）
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # POSTメソッドを指定
    # セッションからuidを取得
    # if:uidがなかった場合、ログイン画面へ返す flashメッセージを返す
    # else:メッセージ投稿の処理
      # メッセージとグループidをそれぞれ変数に格納
      # メッセージをDBに保存
      # 対応するグループidのメッセージ投稿画面に戻る

# メッセージの編集


# メッセージの削除
# エンドポイント、メソッドの指定（激おこはGET,削除はPOST）
# 現在の時刻を取得
  # if:22:00~6:00の場合、return 激おこhtml
  # else:以下
    # POSTメソッドを指定
    # セッションからuidを取得
    # if:uidがなかった場合、ログイン画面へ返す flashメッセージを返す
    # else:メッセージ削除の処理
      # 入力フォームからメッセージid,グループidを取得し変数に格納
      # メッセージidをキーに、DBからメッセージのデータを取得
      # if:取得したuser_idとセッションで保持しているuidが一致している場合
        # DBへメッセージ削除の処理、flashメッセージ（削除したよ）
      # else:flashメッセージ（作成者じゃないから削除できないよ）
# 画面をリダイレクト